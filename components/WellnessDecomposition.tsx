import React, { useState, useEffect } from 'react';
import api from '../src/services/api';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Progress } from './ui/progress';

interface FactorContribution {
  factorId: string;
  factorName?: string;
  positive: number;
  negative: number;
  netEffect: number;
}

interface WellnessData {
  wellness: number;
  positiveEffects: number;
  negativeEffects: number;
  breakdown: FactorContribution[];
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ Wellness Score
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞ –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 * –†–∞–∑–¥–µ–ª—è–µ—Ç –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
 */
export const WellnessDecomposition: React.FC = () => {
  const [data, setData] = useState<WellnessData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setIsLoading(true);
      const response = await api.get('/api/analytics/current-breakdown');
      setData(response.data.data);
    } catch (err: any) {
      console.error('Failed to load wellness breakdown:', err);
      setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading) {
    return (
      <Card>
        <CardContent className="py-8">
          <div className="text-center text-slate-500">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏...</div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardContent className="py-8">
          <div className="text-center text-red-600">{error}</div>
        </CardContent>
      </Card>
    );
  }

  if (!data) return null;

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–Ω–∞—á–∏–º—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã (—Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º > 0.1)
  const positiveFactors = data.breakdown
    .filter(f => f.positive > 0.1)
    .sort((a, b) => b.positive - a.positive);
  
  const negativeFactors = data.breakdown
    .filter(f => f.negative > 0.1)
    .sort((a, b) => b.negative - a.negative);

  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
  const maxPositive = Math.max(...positiveFactors.map(f => f.positive), 1);
  const maxNegative = Math.max(...negativeFactors.map(f => f.negative), 1);

  return (
    <Card>
      <CardHeader>
        <CardTitle>–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è Wellness Score (Zyra 3.0)</CardTitle>
        <CardDescription>
          –ò–º–ø—É–ª—å—Å–Ω–æ-–æ—Ç–∫–ª–∏–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å –ë–∞–Ω–∏—Å—Ç–µ—Ä–∞
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* –¢–µ–∫—É—â–∏–π Wellness */}
        <div className="p-4 bg-slate-50 rounded-lg border border-slate-200">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-slate-600">–¢–µ–∫—É—â–∏–π Wellness</span>
            <span className="text-3xl font-bold text-slate-900">{data.wellness.toFixed(1)}</span>
          </div>
          <Progress value={data.wellness} className="h-3" />
          <div className="mt-2 flex justify-between text-xs text-slate-500">
            <span>–ù–∏–∑–∫–∏–π</span>
            <span>–°—Ä–µ–¥–Ω–∏–π</span>
            <span>–í—ã—Å–æ–∫–∏–π</span>
          </div>
        </div>

        {/* –ë–∞–ª–∞–Ω—Å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ */}
        <div className="grid grid-cols-2 gap-4">
          <div className="p-3 bg-green-50 rounded-lg border border-green-200">
            <div className="text-xs font-medium text-green-700 mb-1">–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã</div>
            <div className="text-2xl font-bold text-green-900">
              +{data.positiveEffects.toFixed(1)}
            </div>
          </div>
          <div className="p-3 bg-red-50 rounded-lg border border-red-200">
            <div className="text-xs font-medium text-red-700 mb-1">–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã</div>
            <div className="text-2xl font-bold text-red-900">
              -{data.negativeEffects.toFixed(1)}
            </div>
          </div>
        </div>

        {/* –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã */}
        {positiveFactors.length > 0 && (
          <div>
            <h4 className="font-semibold text-green-700 mb-3 flex items-center gap-2">
              <span className="text-xl">‚úì</span>
              –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã ({positiveFactors.length})
            </h4>
            <div className="space-y-3">
              {positiveFactors.map((factor) => (
                <div key={factor.factorId} className="space-y-1">
                  <div className="flex items-center justify-between text-sm">
                    <span className="font-medium text-slate-700">
                      {factor.factorName || factor.factorId}
                    </span>
                    <span className="text-green-600 font-semibold">
                      +{factor.positive.toFixed(2)}
                    </span>
                  </div>
                  <div className="w-full bg-slate-100 rounded-full h-2 overflow-hidden">
                    <div
                      className="h-full bg-green-500 rounded-full transition-all duration-300"
                      style={{ width: `${(factor.positive / maxPositive) * 100}%` }}
                    ></div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã */}
        {negativeFactors.length > 0 && (
          <div>
            <h4 className="font-semibold text-red-700 mb-3 flex items-center gap-2">
              <span className="text-xl">‚úó</span>
              –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã ({negativeFactors.length})
            </h4>
            <div className="space-y-3">
              {negativeFactors.map((factor) => (
                <div key={factor.factorId} className="space-y-1">
                  <div className="flex items-center justify-between text-sm">
                    <span className="font-medium text-slate-700">
                      {factor.factorName || factor.factorId}
                    </span>
                    <span className="text-red-600 font-semibold">
                      -{factor.negative.toFixed(2)}
                    </span>
                  </div>
                  <div className="w-full bg-slate-100 rounded-full h-2 overflow-hidden">
                    <div
                      className="h-full bg-red-500 rounded-full transition-all duration-300"
                      style={{ width: `${(factor.negative / maxNegative) * 100}%` }}
                    ></div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ü–æ—è—Å–Ω–µ–Ω–∏–µ */}
        {(positiveFactors.length > 0 || negativeFactors.length > 0) && (
          <div className="text-xs text-slate-500 p-3 bg-blue-50 rounded border border-blue-200">
            <span className="font-semibold text-blue-900">üí° –ò–º–ø—É–ª—å—Å–Ω–æ-–æ—Ç–∫–ª–∏–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å:</span>
            <ul className="mt-1 ml-4 space-y-0.5">
              <li>‚Ä¢ –ö–∞–∂–¥—ã–π —Ñ–∞–∫—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –∑–∞—Ç—É—Ö–∞—é—â–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º</li>
              <li>‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ) –∑–∞—Ç—É—Ö–∞—é—Ç –º–µ–¥–ª–µ–Ω–Ω–æ (œÑ ‚âà 14-42 –¥–Ω—è)</li>
              <li>‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (—É—Å—Ç–∞–ª–æ—Å—Ç—å) –∑–∞—Ç—É—Ö–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ (œÑ ‚âà 6-18 –¥–Ω–µ–π)</li>
              <li>‚Ä¢ –ü–æ–∫–∞–∑–∞–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ—à–ª—ã—Ö –∏–º–ø—É–ª—å—Å–æ–≤, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</li>
            </ul>
          </div>
        )}

        {/* –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö */}
        {positiveFactors.length === 0 && negativeFactors.length === 0 && (
          <div className="text-center py-8 text-slate-500">
            <p className="mb-2">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤</p>
            <p className="text-sm">
              –ù–∞—á–Ω–∏—Ç–µ –¥–µ–ª–∞—Ç—å —á–µ–∫–∏–Ω—ã, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é wellness
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default WellnessDecomposition;


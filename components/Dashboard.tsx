import React from 'react';
import { CheckInRecord, Factor } from '../types';
import { useLocalStorage } from '../hooks/useLocalStorage';

interface DashboardProps {
  checkInHistory: CheckInRecord[];
  factors: Factor[];
  onStartCheckIn: () => void;
}

const getRecoveryInterpretation = (score: number | null) => {
    if (score === null) return { state: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', recommendation: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —á–µ–∫–∏–Ω, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É.' };
    if (score > 6.0) return { state: '–û—Ç–ª–∏—á–Ω–æ', recommendation: '–ú–æ–∂–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ.' };
    if (score > 5.0) return { state: '–•–æ—Ä–æ—à–µ–µ', recommendation: '–õ—ë–≥–∫–∞—è –∏–ª–∏ —Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.' };
    if (score > 4.0) return { state: '–£–º–µ—Ä–µ–Ω–Ω–æ–µ', recommendation: '–õ—É—á—à–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.' };
    return { state: '–ü–µ—Ä–µ—É—Ç–æ–º–ª–µ–Ω–∏–µ', recommendation: '–û—Ç–¥—ã—Ö, —Å–æ–Ω, —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è.' };
};

const getMetricInterpretation = (value: number | null, isInverted: boolean = false) => {
    if (value === null) return { label: '' };

    if (isInverted) { // Lower is better (e.g., Stress)
        if (value <= 2) return { label: '–ù–∏–∑–∫–∏–π' };
        if (value <= 4) return { label: '–°—Ä–µ–¥–Ω–∏–π' };
        return { label: '–í—ã—Å–æ–∫–∏–π' };
    } else { // Higher is better
        if (value >= 6) return { label: '–û—Ç–ª–∏—á–Ω–æ–µ' };
        if (value >= 4) return { label: '–•–æ—Ä–æ—à–µ–µ' };
        return { label: '–ù–∏–∑–∫–æ–µ' };
    }
};

const MetricCard: React.FC<{ title: string; value: number | null; isInverted?: boolean }> = ({ title, value, isInverted = false }) => {
    const interpretation = getMetricInterpretation(value, isInverted);

    return (
        <div className="bg-white p-4 rounded-xl border border-slate-100 flex flex-col">
            <h3 className="font-semibold text-slate-600 mb-2 text-sm">{title}</h3>
            <div className="mt-auto">
                <p className="text-3xl font-bold text-slate-800">
                    {value !== null ? value : '‚Äì'}
                    <span className="text-xl text-slate-400">/7</span>
                </p>
                {value !== null && <p className="text-sm font-semibold text-slate-600">{interpretation.label}</p>}
            </div>
        </div>
    );
};

const clamp = (num: number, min: number, max: number) => Math.min(Math.max(num, min), max);

const Dashboard: React.FC<DashboardProps> = ({ checkInHistory, factors, onStartCheckIn }) => {
  const [nickname] = useLocalStorage('userNickname', '—á–µ–º–ø–∏–æ–Ω');
  const latestCheckIn = checkInHistory?.[0];
  const interpretation = getRecoveryInterpretation(latestCheckIn?.recoveryScore ?? null);

  let predictedScore: number | null = null;
  let predictionDetails: { currentScore: number; naturalRecovery: number; loadPenalty: number; factorEffect: number; } | null = null;

  if (latestCheckIn) {
      const R_1_7 = latestCheckIn.recoveryScore;
      const R_frac = (R_1_7 - 1) / 6;

      const tss = latestCheckIn.data.tss;
      const tss_n = (tss - 1) / 6; // Normalize from 1-7 scale

      // --- New Prediction Formula ---
      const k = 0.20;
      const R_recov = R_frac + k * (1 - R_frac);

      const lambda = 0.12;
      const P = lambda * tss_n;

      const factorsMap = new Map(factors.map(f => [f.name, f]));
      const F_t_plus_1_frac = latestCheckIn.data.factors.reduce((acc, factorName) => {
          const factor = factorsMap.get(factorName);
          if (factor) {
              const w_j = factor.weight;
              const tau_j = factor.tau || 24;
              // t_j (time since check-in) is ~0 when calculating prediction right after.
              const decayedContribution = w_j * Math.exp(-(0 + 24) / tau_j);
              return acc + decayedContribution;
          }
          return acc;
      }, 0);
      
      const R_frac_t_plus_1 = clamp(R_recov - P + F_t_plus_1_frac, 0, 1);
      predictedScore = 1 + 6 * R_frac_t_plus_1;
      
      predictionDetails = {
        currentScore: R_1_7,
        naturalRecovery: 6 * (k * (1 - R_frac)), // map effect to 1-7 scale
        loadPenalty: 6 * P, // map effect to 1-7 scale
        factorEffect: 6 * F_t_plus_1_frac, // map effect to 1-7 scale
      };
  }
  const predictedInterpretation = getRecoveryInterpretation(predictedScore);

  return (
    <div className="space-y-8">
       <header className="flex justify-between items-start">
            <div>
                <h2 className="text-2xl font-bold text-slate-800">–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {nickname} üåø</h2>
                <p className="text-slate-500">
                  {latestCheckIn 
                    ? '–í–æ—Ç –≤–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.'
                    : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—á–Ω–∏—Ç–µ —Å –ø–µ—Ä–≤–æ–≥–æ —á–µ–∫–∏–Ω–∞, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–∞–Ω–µ–ª—å.'
                  }
                </p>
            </div>
             <button
                onClick={onStartCheckIn}
                className="bg-emerald-500 text-white font-bold py-3 px-6 rounded-lg hover:bg-emerald-600 transition-colors whitespace-nowrap"
            >
                {latestCheckIn ? '–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–µ–∫–∏–Ω' : '–ù–∞—á–∞—Ç—å –ø–µ—Ä–≤—ã–π —á–µ–∫–∏–Ω' }
            </button>
        </header>

      <div className="bg-white p-6 rounded-xl border border-slate-100 grid grid-cols-1 md:grid-cols-2 md:divide-x md:divide-slate-200 gap-6 md:gap-0">
          <div className="text-center md:pr-6 flex flex-col justify-center">
              <h3 className="text-slate-500 text-sm font-medium mb-2">–í–∞—à –±–∞–ª–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</h3>
              <p className="text-6xl font-bold text-slate-800">{latestCheckIn ? latestCheckIn.recoveryScore.toFixed(1) : '--'}</p>
              <p className="font-semibold text-slate-600 mt-1">{interpretation.state}</p>
              <p className="text-xs text-slate-400 mt-2">–û—Ç—Ä–∞–∂–∞–µ—Ç –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 7.</p>
          </div>
          <div className="text-center flex flex-col justify-center md:pl-6">
              <h3 className="text-slate-500 text-sm font-medium mb-2">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</h3>
              <p className="text-lg font-semibold text-slate-700">{interpretation.recommendation}</p>
              <p className="text-xs text-slate-400 mt-2">–û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</p>
          </div>
      </div>
      
      <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
          <MetricCard title="üí§ –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞" value={latestCheckIn?.data.sleepQuality ?? null} />
          <MetricCard title="üí™ –≠–Ω–µ—Ä–≥–∏—è" value={latestCheckIn?.data.energyLevel ?? null} />
          <MetricCard title="üôÇ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ" value={latestCheckIn?.data.mood ?? null} />
          <MetricCard title="ü§Ø –°—Ç—Ä–µ—Å—Å" value={latestCheckIn?.data.stressLevel ?? null} isInverted={true} />
          <MetricCard title="üéØ –ú–æ—Ç–∏–≤–∞—Ü–∏—è" value={latestCheckIn?.data.motivation ?? null} />
          <MetricCard title="üß† –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è" value={latestCheckIn?.data.focus ?? null} />
          <MetricCard title="ü§ï –ë–æ–ª—å –≤ –º—ã—à—Ü–∞—Ö" value={latestCheckIn?.data.muscleSoreness ?? null} isInverted={true} />
          <MetricCard title="üèãÔ∏è TSS" value={latestCheckIn?.data.tss ?? null} isInverted={true} />
      </div>

      <div className="bg-white p-6 rounded-xl border border-slate-100">
        <h3 className="text-xl font-semibold text-slate-700 mb-4">–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞</h3>
        {predictedScore !== null && predictionDetails ? (
          <div className="flex flex-col md:flex-row items-center justify-between gap-6">
            <div className="flex flex-col items-center justify-center text-center">
              <h3 className="text-slate-500 text-sm font-medium mb-1">–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</h3>
              <p className="text-6xl font-bold text-slate-800">{predictedScore.toFixed(1)}</p>
              <p className="font-semibold text-slate-600">{predictedInterpretation.state}</p>
               <p className="text-xs text-slate-400 mt-2">–û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–ª (1-7) —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.</p>
            </div>
            <div className="w-full md:w-px bg-slate-200 h-px md:h-32"></div>
            <div className="space-y-3 text-sm flex-grow w-full max-w-sm">
                <div>
                  <div className="flex justify-between items-center">
                    <span className="text-slate-600">–¢–µ–∫—É—â–∏–π –±–∞–ª–ª:</span>
                    <span className="font-bold text-slate-800">{predictionDetails.currentScore.toFixed(1)}</span>
                  </div>
                  <p className="text-xs text-slate-400 mt-1">–í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –±–∞–ª–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</p>
                </div>
                <div>
                  <div className="flex justify-between items-center">
                    <span className="text-slate-600">–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:</span>
                    <span className="font-bold text-slate-800">+{predictionDetails.naturalRecovery.toFixed(2)}</span>
                  </div>
                   <p className="text-xs text-slate-400 mt-1">–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∑–∞ —Å—á–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ—Ç–¥—ã—Ö–∞.</p>
                </div>
                 <div>
                  <div className="flex justify-between items-center">
                    <span className="text-slate-600">–®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞–≥—Ä—É–∑–∫—É:</span>
                    <span className="font-bold text-slate-800">-{predictionDetails.loadPenalty.toFixed(2)}</span>
                  </div>
                   <p className="text-xs text-slate-400 mt-1">–ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å.</p>
                </div>
                 <div>
                  <div className="flex justify-between items-center">
                    <span className="text-slate-600">–í–ª–∏—è–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–∑–∞–≤—Ç—Ä–∞):</span>
                    <span className="font-bold text-slate-800">
                      {predictionDetails.factorEffect >= 0 ? '+' : ''}{predictionDetails.factorEffect.toFixed(2)}
                    </span>
                  </div>
                   <p className="text-xs text-slate-400 mt-1">–û—Å—Ç–∞—Ç–æ—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.</p>
                </div>
            </div>
          </div>
        ) : (
          <p className="text-slate-500">–ü—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —á–µ–∫–∏–Ω–∞.</p>
        )}
      </div>
      
       <div>
          <h3 className="text-lg font-semibold text-slate-700 mb-3">–í–ª–∏—è—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Å–µ–≥–æ–¥–Ω—è</h3>
            {latestCheckIn && latestCheckIn.data.factors.length > 0 ? (
                <div className="max-h-36 overflow-y-auto pr-2">
                    <div className="flex flex-wrap gap-2">
                        {latestCheckIn.data.factors.map(factor => (
                            <span key={factor} className="bg-slate-200 text-slate-800 text-sm font-semibold px-3 py-1.5 rounded-full">{factor}</span>
                        ))}
                    </div>
                </div>
            ) : (
                <p className="text-slate-500 text-sm">–§–∞–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–º–µ—Ç–∏—Ç–µ –≤ —á–µ–∫–∏–Ω–µ, –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å.</p>
            )}
      </div>

    </div>
  );
};

export default Dashboard;
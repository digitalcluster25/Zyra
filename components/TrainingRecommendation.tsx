import React, { useState, useEffect } from 'react';
import api from '../src/services/api';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';

interface Recommendation {
  recommendedDate: string;
  readinessScore: number;
  reasoning: string;
  daysUntilOptimal: number;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
 * –ù–∞ –æ—Å–Ω–æ–≤–µ –∏–º–ø—É–ª—å—Å–Ω–æ-–æ—Ç–∫–ª–∏–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏
 */
export const TrainingRecommendation: React.FC = () => {
  const [recommendation, setRecommendation] = useState<Recommendation | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    loadRecommendation();
  }, []);

  const loadRecommendation = async () => {
    try {
      setIsLoading(true);
      setError('');
      const response = await api.get('/api/analytics/training-recommendation');
      setRecommendation(response.data.data);
    } catch (err: any) {
      console.error('Failed to load recommendation:', err);
      setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading) {
    return (
      <Card>
        <CardContent className="py-8">
          <div className="text-center text-slate-500">–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏...</div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardContent className="py-8">
          <div className="text-center text-red-600">{error}</div>
        </CardContent>
      </Card>
    );
  }

  if (!recommendation) {
    return (
      <Card>
        <CardContent className="py-8">
          <div className="text-center text-slate-500">
            –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
          </div>
        </CardContent>
      </Card>
    );
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ –∏–∫–æ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  const getReadinessColor = (score: number) => {
    if (score >= 85) return 'text-green-600 bg-green-50 border-green-200';
    if (score >= 70) return 'text-yellow-600 bg-yellow-50 border-yellow-200';
    if (score >= 50) return 'text-orange-600 bg-orange-50 border-orange-200';
    return 'text-red-600 bg-red-50 border-red-200';
  };

  const getReadinessIcon = (score: number) => {
    if (score >= 85) return 'üü¢';
    if (score >= 70) return 'üü°';
    if (score >= 50) return 'üü†';
    return 'üî¥';
  };

  const readinessClass = getReadinessColor(recommendation.readinessScore);
  const readinessIcon = getReadinessIcon(recommendation.readinessScore);

  return (
    <Card>
      <CardHeader>
        <CardTitle>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ</CardTitle>
        <CardDescription>
          –ù–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞ —Ñ–∏—Ç–Ω–µ—Å–∞ –∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* –£—Ä–æ–≤–µ–Ω—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
        <div className={`p-4 rounded-lg border ${readinessClass}`}>
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium">–£—Ä–æ–≤–µ–Ω—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏</span>
            <span className="text-3xl">{readinessIcon}</span>
          </div>
          <div className="text-3xl font-bold">
            {recommendation.readinessScore.toFixed(1)}%
          </div>
        </div>

        {/* –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–∞—Ç–∞ */}
        <div className="p-4 bg-slate-50 rounded-lg border border-slate-200">
          <div className="text-sm font-medium text-slate-600 mb-1">
            –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
          </div>
          <div className="text-xl font-bold text-slate-900 mb-2">
            {new Date(recommendation.recommendedDate).toLocaleDateString('ru-RU', {
              weekday: 'long',
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            })}
          </div>
          {recommendation.daysUntilOptimal > 0 && (
            <div className="text-sm text-slate-500">
              –ß–µ—Ä–µ–∑ {recommendation.daysUntilOptimal} {recommendation.daysUntilOptimal === 1 ? '–¥–µ–Ω—å' : '–¥–Ω–µ–π'}
            </div>
          )}
          {recommendation.daysUntilOptimal === 0 && (
            <div className="text-sm text-green-600 font-medium">
              –°–µ–≥–æ–¥–Ω—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ!
            </div>
          )}
        </div>

        {/* –û–±—ä—è—Å–Ω–µ–Ω–∏–µ */}
        <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
          <div className="text-sm font-medium text-blue-900 mb-2">
            üí° –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –¥–∞—Ç–∞?
          </div>
          <p className="text-sm text-blue-800">
            {recommendation.reasoning}
          </p>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
        <Button 
          variant="outline" 
          className="w-full"
          onClick={loadRecommendation}
          disabled={isLoading}
        >
          –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        </Button>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ */}
        <div className="text-xs text-slate-500">
          <p className="mb-1">
            <strong>–ú–æ–¥–µ–ª—å —É—á–∏—Ç—ã–≤–∞–µ—Ç:</strong>
          </p>
          <ul className="ml-4 space-y-0.5">
            <li>‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ñ–∏—Ç–Ω–µ—Å–∞ –∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ (TSB)</li>
            <li>‚Ä¢ –ó–∞—Ç—É—Ö–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–æ—à–ª—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</li>
            <li>‚Ä¢ –í–ª–∏—è–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏</li>
            <li>‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
};

export default TrainingRecommendation;


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects  ProjectMember[]
  tasks     Task[]
  activities Activity[]
}

// Project model
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members     ProjectMember[]
  tasks       Task[]
}

// Project membership
model ProjectMember {
  id        String   @id @default(cuid())
  role      String   @default("member") // "owner", "admin", "member"
  joinedAt  DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

// Task model
model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("todo") // "todo", "in_progress", "done"
  priority    String   @default("medium") // "low", "medium", "high"
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assigneeId  String?
  assignee    User?    @relation(fields: [assigneeId], references: [id], onDelete: SetNull)

  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Activity log model
model Activity {
  id          String   @id @default(cuid())
  action      String
  description String
  createdAt   DateTime @default(now())

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
